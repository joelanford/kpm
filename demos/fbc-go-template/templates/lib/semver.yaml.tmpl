{{- define "semver" -}}
{{- $defaultChannelTypePreference := .Values.defaultChannelTypePreference | default "major" -}}
{{- $defaultChannel := "" -}}
{{- $package := "" -}}
{{- $bundleNames := dict -}}

{{- range $maturity := (list "candidate" "fast" "stable") -}}

{{- /* ---------------------------------------------------------
    Parse the names and versions of the bundles at this maturity
    level from the bundle blobs, and build a list, sorted by
    semver version.
---------------------------------------------------------------- */ -}}
{{- $versionsMap := dict -}}
{{- $versionsList := list -}}
{{- range (index $.Values $maturity) -}}
    {{- $bundleMeta := index $.Bundles . -}}
    {{- $bundle := (printf "%s" $bundleMeta.Blob) | fromJson -}}
    {{- $bundleNames = $bundleNames | set $bundle.name "" -}}
    {{- range $bundle.properties -}}
        {{- if eq .type "olm.package" -}}
            {{- $version := .value.version | semver -}}
            {{- $versionsMap = $versionsMap | set (printf "%s" $version) (dict "semver" $version "name" $bundle.name) -}}
            {{- $versionsList = $versionsList | append $version -}}
        {{- end -}}
    {{- end -}}
{{- end -}}
{{- if eq ($versionsList | len) 0 -}}{{- continue -}}{{- end -}}

{{- $versions := list -}}
{{- range ($versionsList | sortSemver) -}}
  {{- $key := printf "%s" . -}}
  {{- $versions = $versions | append (index $versionsMap $key) -}}
{{- end -}}
{{- $package = (index $.Bundles (last $versions).name).Package -}}

{{- /* ---------------------------------------------------------
    Store two maps:
    1. minorChannelHeadsByMajor: keyed by major version, and the
         value is the corresponding list of "channel heads" for
         that major version in ascending semver sorted order,
         where "channel head" is defined as the highest patch
         version within a minor version.

         This map is useful to construct minor-version based
         channels and to create replaces chains between minor
         versions.

    2. byMajorAndMinor: is a map of maps, keyed by major and
         minor, and the value is the corresponding list of X.Y
         patch versions in ascending semver sorted order.

         This map is used to construct skips edges for each
         minor version's channel head.
---------------------------------------------------------------- */ -}}
{{- $minorChannelHeadsByMajor := dict -}}
{{- $byMajorAndMinor := dict -}}
{{- $prevMajor := "" -}}
{{- $prevMinor := "" -}}
{{- $curMajor := "" -}}
{{- $curMinor := "" -}}
{{- range $i, $version := $versions -}}
  {{- $majorVersion := (printf "%d" $version.semver.Major) -}}
  {{- $minorVersion := (printf "%d" $version.semver.Minor) -}}
  {{- if eq $curMajor "" -}}{{- $curMajor = $majorVersion -}}{{- end -}}
  {{- if eq $curMinor "" -}}{{- $curMinor = $minorVersion -}}{{- end -}}
  {{- if or (ne $curMajor $majorVersion) (ne $curMinor $minorVersion) -}}
    {{- $prevMajor = $curMajor -}}
    {{- $curMajor = $majorVersion -}}
    {{- $prevMinor = $curMinor -}}
    {{- $curMinor = $minorVersion -}}
    {{- $channelHeadsForMajor := ($minorChannelHeadsByMajor | get $prevMajor) | default list -}}
    {{- $channelHeadsForMajor = $channelHeadsForMajor | append (index $versions (sub $i 1)) -}}
    {{- $minorChannelHeadsByMajor = $minorChannelHeadsByMajor | set $prevMajor $channelHeadsForMajor -}}
  {{- end -}}

  {{- $major := ($byMajorAndMinor | get $majorVersion) | default dict -}}
  {{- $minor := ($major | get $minorVersion) | default list -}}
  {{- $minor = $minor | append $version -}}
  {{- $major = $major | set $minorVersion $minor -}}
  {{- $byMajorAndMinor = $byMajorAndMinor | set $majorVersion $major -}}
{{- end -}}
{{- $lastVersion := last $versions -}}
{{- $lastMajorVersion := (printf "%d" $lastVersion.semver.Major) -}}
{{- $channelHeadsForMajor := ($minorChannelHeadsByMajor | get $lastMajorVersion) | default list -}}
{{- $channelHeadsForMajor = $channelHeadsForMajor | append $lastVersion -}}
{{- $minorChannelHeadsByMajor = $minorChannelHeadsByMajor | set $lastMajorVersion $channelHeadsForMajor -}}


{{- /* ---------------------------------------------------------
    Generate minor channels. Each minor channel consists of a
    single entry with:
    1. The highest X.Y.Z in an X.Y
    2. A replaces to the next lowest X.Y channel's head
       (if it exists)
    3. A list of skips contain all of the other lower X.Y
       versions.

    NOTE: There are no replaces across major version boundaries,
    because semver major versions indicate breaking changes that
    often require manual upgrades.
---------------------------------------------------------------- */ -}}
{{- if $.Values.generateMinorChannels -}}
{{- range $minorChannelHeads := $minorChannelHeadsByMajor -}}
{{- range $i, $head := $minorChannelHeads -}}
{{- $majorVersion := (printf "%d" $head.semver.Major) -}}
{{- $minorVersion := (printf "%d" $head.semver.Minor) -}}
{{- $replaces := "" -}}
{{- if gt $i 0 -}}{{- $replaces = (index $minorChannelHeads (sub $i 1)).name -}}{{- end -}}
{{- $skips := ($byMajorAndMinor | dig $majorVersion $minorVersion) | initial -}}
{{- $channelName := printf "%s-v%s.%s" $maturity $majorVersion $minorVersion -}}
{{- if eq $defaultChannelTypePreference "minor" -}}{{- $defaultChannel = $channelName -}}{{- end -}}
---
schema: olm.channel
package: {{ $package }}
name: {{ $channelName }}
entries:
- name: {{ .name }}
  {{- if $replaces }}
  replaces: {{ $replaces }}
  {{- end }}
  {{- if $skips }}
  skips:
  {{- range $skips }}
  - {{ .name }}
  {{- end }}
{{- range $skips }}
- name: {{ .name }}
{{- end }}
  {{- end }}
{{ end }}{{- /* individual minor channel */ -}}
{{- end }}{{- /* all minor channels */ -}}
{{- end }}{{- /* generate minor version based channels */ -}}

{{- /* ---------------------------------------------------------
    Generate major channels. Each major channel consists of a
    entries for each minor version, where each entry has:
    1. The highest X.Y.Z in the corresponding X.Y
    2. A replaces to the next lowest minor version entry within
       the major version (if it exists)
    3. A list of skips containing all of the other lower X.Y
       versions.

    A major channel is essentially a concatenation of all of the
    minor channels grouped by their major channel.

    NOTE: There are no replaces across major version boundaries,
    because semver major versions indicate breaking changes that
    often require manual upgrades.
---------------------------------------------------------------- */ -}}
{{- if $.Values.generateMajorChannels -}}
{{- range $majorVersion, $minorChannelHeads := $minorChannelHeadsByMajor -}}
{{- $channelName := printf "%s-v%s" $maturity $majorVersion -}}
{{- if eq $defaultChannelTypePreference "major" -}}{{- $defaultChannel = $channelName -}}{{- end -}}
---
schema: olm.channel
package: {{ $package }}
name: {{ $channelName }}
entries:
{{- range $i, $head := $minorChannelHeads -}}
{{- $minorVersion := (printf "%d" $head.semver.Minor) -}}
{{- $replaces := "" -}}
{{- if gt $i 0 -}}{{- $replaces = (index $minorChannelHeads (sub $i 1)).name -}}{{- end -}}
{{- $skips := ($byMajorAndMinor | dig $majorVersion $minorVersion) | initial }}
- name: {{ .name }}
  {{- if $replaces }}
  replaces: {{ $replaces }}
  {{- end }}
  {{- if $skips }}
  skips:
  {{- range $skips }}
  - {{ .name }}
  {{- end }}
{{- range $skips }}
- name: {{ .name }}
{{- end }}
  {{- end }}
{{- end }}{{/* individual major channel entry */}}
{{  end }}{{/* individual major channel */}}
{{- end }}{{/* generate major version based channels */}}

{{- end }}{{/* maturity (candidate/fast/stable) */ -}}

{{- range $bundleName, $bundle := .Bundles }}
{{- if $bundleNames | hasKey $bundleName }}
---
{{ printf "%s" $bundle.Blob | fromJson | toYaml }}
{{- end }}
{{- end }}

---
schema: olm.package
name: {{ $package }}
defaultChannel: {{ $defaultChannel }}
{{- if .Values.description }}
description: {{ .Values.description }}
{{- end }}
{{- if .Values.icon }}
icon:
  base64data: {{ .Values.icon.base64data }}
  mediatype: {{ .Values.icon.mediatype }}
{{- end }}
{{ end }}{{/* define "semver" */}}